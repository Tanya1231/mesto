(()=>{"use strict";class e{constructor(e,t){this.config=e,this._form=t,this._sumbitButton=this._form.querySelector(e.sumbitButton),this._inactiveButtonClass=e.inactiveButtonClass}_setCustomError(e){const t=e.validity;if(e.setCustomValidity(""),t.tooShort||t.tooLong){const t=e.value.length,s=e.getAttribute("minlength");e.setCustomValidity(`Минимальное колличество символов ${s}. Длина текста сейчас ${t} символ`)}}_setFieldError(e){document.querySelector(`#${e.id}-error`).textContent=e.validationMessage}_setButtonState(){this._form.checkValidity()?(this._sumbitButton.classList.remove(this._inactiveButtonClass),this._sumbitButton.removeAttribute("disabled")):this._disableButtonState()}_disableButtonState(){this._sumbitButton.classList.add(this._inactiveButtonClass),this._sumbitButton.setAttribute("disabled",!0)}_handleFormSumbit(e){e.preventDefault(),this._disableButtonState()}_handleFormInput(e){const t=e.target;this._setCustomError(t),this._setFieldError(t),this._setButtonState()}enableValidation=()=>{this._form.addEventListener("submit",(e=>this._handleFormSumbit(e))),this._form.addEventListener("input",(e=>this._handleFormInput(e))),this._setButtonState()}}class t{constructor({data:e,userId:t,handleCardClick:s,handleLikeClick:i,handleDisLikeClick:r,handleDeleteCard:n},o){this._name=e.name,this._link=e.link,this._likes=e.likes,this._cardOwnerId=e.owner._id,this._userId=t,this._cardId=e._id,this._handleCardClick=s,this._handleLikeClick=i,this._handleDisLikeClick=r,this._handleDeleteCard=n,this._cardSelector=o}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}removeCard=()=>{this._card.remove(),this._card=null};isLiked(){return this._likes.some((e=>this._userId===e._id))}_setIsLiked(){this.isLiked()&&this._likeButton.classList.add("element__vector_active")}handleLikeCard(e){this._likes=e.likes,this._likesCounter.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("element__vector_active"):this._likeButton.classList.remove("element__vector_active")}_deleteCard(){this._userId!==this._cardOwnerId&&this._deleteButton.remove()}_setEventListners(){this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this._cardId)})),this._likeButton.addEventListener("click",(()=>{this.isLiked()?this._handleDisLikeClick(this._cardId):this._handleLikeClick(this._cardId)})),this._image.addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}generateCard(){return this._card=this._getTemplate(),this._likeButton=this._card.querySelector(".element__vector"),this._likesCounter=this._card.querySelector(".element__vector-counter"),this._deleteButton=this._card.querySelector(".element__delete"),this._image=this._card.querySelector(".element__image"),this._card.querySelector(".element__title").textContent=this._name,this._likesCounter.textContent=this._likes.length,this._image.src=this._link,this._image.alt=this._name,this._setIsLiked(),this._deleteCard(),this._setEventListners(),this._card}}class s{constructor(e){this._popup=document.querySelector(e),this.close=this.close.bind(this),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popup.querySelector(".popup__button-close").addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class i extends s{constructor(e,{formSubmit:t}){super(e),this._formSubmit=t,this._form=this._popup.querySelector(".form"),this._submitButton=this._popup.querySelector(".form__button"),this._inputList=this._popup.querySelectorAll(".form__container"),this._textSubmit=this._submitButton.textContent}getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}close(){this._form.reset(),super.close()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._formSubmit(this.getInputValues()),this.close()}))}loading(e){this._submitButton.textContent=e?"Сохранение...":this._textSubmit}}const r=document.querySelector(".form"),n=document.querySelector(".form_popup_add-card"),o=document.querySelector(".form__container_type_name"),a=document.querySelector(".form__container_type_info"),l=document.querySelector(".profile__edit-button"),d=document.querySelector(".profile__addbutton"),h=(document.querySelector(".profile__avatar"),document.querySelector(".form_popup_avatar")),c={form:".form",sumbitButton:".form__button",inactiveButtonClass:"form__button_invalid"},_=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}_handleResponse(e){return e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)}async getUserInfo(){const e=await fetch(`${this._baseUrl}/users/me`,{headers:this._headers});return this._handleResponse(e)}async editUserInfo(e){const t=await fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})});return this._handleResponse(t)}async getInitialCards(){const e=await fetch(`${this._baseUrl}/cards`,{headers:this._headers});return this._handleResponse(e)}async setUserAvatar(e){const t=await fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})});return this._handleResponse(t)}async addCard(e){const t=await fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})});return this._handleResponse(t)}async putLike(e){const t=await fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers});return this._handleResponse(t)}async deleteCard(e){const t=await fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers});this._handleResponse(t)}async removeLike(e){const t=await fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers});return this._handleResponse(t)}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-47",headers:{authorization:"0162be33-26fc-4582-97e8-0d78f4ad20d1","Content-Type":"application/json"}}),u=new class extends s{constructor(e){super(e),this._picturePopupImage=this._popup.querySelector(".popup__image"),this._popupSubtitle=this._popup.querySelector(".popup__subtitle")}open(e,t){super.open(),this._popupSubtitle.textContent=e,this._picturePopupImage.alt=e,this._picturePopupImage.src=t}}(".popup_open-img"),p=new class extends s{constructor(e){super(e),this._form=this._popup.querySelector(".form")}submitHandle(e){this._handleSubmit=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()}))}}(".popup_type_delete"),m=new class{constructor({profileName:e,profileInfo:t,profileAvatar:s}){this._profileName=document.querySelector(e),this._profileInfo=document.querySelector(t),this._profileAvatar=document.querySelector(s)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileInfo.textContent}}setUserInfo(e){this._profileName.textContent=e.name,this._profileInfo.textContent=e.about,this._profileAvatar.src=e.avatar}setUserAvatar(e){this._profileAvatar.src=e.avatar}}({profileName:".profile__title",profileInfo:".profile__subtitle",profileAvatar:".profile__avatar"}),f=new i(".popup_type_profile",{formSubmit:e=>{f.loading(!0),_.editUserInfo(e).then((e=>{m.setUserInfo(e)})).catch((e=>{console.log(e)})).finally((()=>{f.loading(!1)}))}});f.setEventListeners();const v=e=>{const s=new t({data:e,userId:y,handleCardClick:(e,t)=>{u.open(e,t)},handleLikeClick:e=>{_.putLike(e).then((e=>{s.handleLikeCard(e)})).catch((e=>{console.log(e)}))},handleDisLikeClick:e=>{_.removeLike(e).then((e=>{s.handleLikeCard(e)})).catch((e=>{console.log(e)}))},handleDeleteCard:e=>{p.open(),p.submitHandle((()=>{_.deleteCard(e).then((()=>{p.close(),s.removeCard()})).catch((e=>{console.log(e)}))}))}},"#card");return s.generateCard()},b=new class{constructor({renderer:e},t){this._renderer=e,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItemAppend(e){this._container.append(e)}addItemPrepend(e){this._container.prepend(e)}}({renderer:e=>{b.addItemAppend(v(e))}},".elements"),k=new i(".popup_add_card",{formSubmit:e=>{k.loading(!0),_.addCard(e).then((e=>{b.addItemPrepend(v(e))})).catch((e=>{console.log(e)})).finally((()=>{k.loading(!1)}))}}),C=new i(".popup_type_avatar",{formSubmit:e=>{C.loading(!0),_.setUserAvatar(e).then((e=>{m.setUserAvatar(e)})).catch((e=>{console.log(e)})).finally((()=>{C.loading(!1)}))}});let y;new e(c,n).enableValidation(),new e(c,r).enableValidation(),new e(c,h).enableValidation(),Promise.all([_.getInitialCards(),_.getUserInfo()]).then((e=>{const[t,s]=e;y=s._id,b.renderItems(t),m.setUserInfo(s),m.setUserAvatar(s)})),p.setEventListeners(),C.setEventListeners(),k.setEventListeners(),u.setEventListeners(),l.addEventListener("click",(()=>{const e=m.getUserInfo();o.value=e.name,a.value=e.about,f.open()})),d.addEventListener("click",(()=>{k.open()})),document.querySelector(".profile__avatar-edit").addEventListener("click",(()=>{C.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,