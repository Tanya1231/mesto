(()=>{"use strict";class e{constructor({data:e,handleCardClick:t,hadleDeleteClick:s},r){this._name=e.name,this._link=e.link,this._handleCardClick=t,this._cardSelector=r,this._card=this._getTemplate()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}_removeCard=()=>{this._card.remove(),this._card=null};_likeCard(e){e.target.classList.toggle("element__vector_active")}_setEventListners(){this._card.querySelector(".element__delete").addEventListener("click",this._removeCard),this._card.querySelector(".element__vector").addEventListener("click",this._likeCard),this._card.querySelector(".element__image").addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}generateCard(){return this._image=this._card.querySelector(".element__image"),this._card.querySelector(".element__title").textContent=this._name,this._image.src=this._link,this._image.alt=this._name,this._setEventListners(),this._card}}class t{constructor(e,t){this.config=e,this._form=t,this._sumbitButton=this._form.querySelector(e.sumbitButton),this._inactiveButtonClass=e.inactiveButtonClass}_setCustomError(e){const t=e.validity;if(e.setCustomValidity(""),t.tooShort||t.tooLong){const t=e.value.length,s=e.getAttribute("minlength");e.setCustomValidity(`Минимальное колличество символов ${s}. Длина текста сейчас ${t} символ`)}}_setFieldError(e){document.querySelector(`#${e.id}-error`).textContent=e.validationMessage}_setButtonState(){this._form.checkValidity()?(this._sumbitButton.classList.remove(this._inactiveButtonClass),this._sumbitButton.removeAttribute("disabled")):this._disableButtonState()}_disableButtonState(){this._sumbitButton.classList.add(this._inactiveButtonClass),this._sumbitButton.setAttribute("disabled",!0)}_handleFormSumbit(e){e.preventDefault(),this._disableButtonState()}_handleFormInput(e){const t=e.target;this._setCustomError(t),this._setFieldError(t),this._setButtonState()}enableValidation=()=>{this._form.addEventListener("submit",(e=>this._handleFormSumbit(e))),this._form.addEventListener("input",(e=>this._handleFormInput(e))),this._setButtonState()}}class s{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItemAppend(e){this._container.append(e)}addItemPrepend(e){this._container.prepend(e)}}class r{constructor(e){this._popup=document.querySelector(e),this.close=this.close.bind(this),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popup.querySelector(".popup__button-close").addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class n extends r{constructor(e,{formSubmit:t}){super(e),this._formSubmit=t,this._form=this._popup.querySelector(".form"),this._submitButton=this._popup.querySelector(".form__button"),this._inputList=this._popup.querySelectorAll(".form__container")}getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}close(){this._form.reset(),super.close()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._formSubmit(this.getInputValues()),this.close()}))}}const i=document.querySelector(".form"),o=document.querySelector(".form_popup_add-card"),a=document.querySelector(".form__container_type_name"),h=document.querySelector(".form__container_type_info"),l=document.querySelector(".profile__edit-button"),d=document.querySelector(".profile__addbutton"),c=document.querySelector(".profile__avatar"),_=document.querySelector(".form_popup_avatar"),u={form:".form",sumbitButton:".form__button",inactiveButtonClass:"form__button_invalid"},p=new class extends r{constructor(e){super(e),this._picturePopupImage=this._popup.querySelector(".popup__image"),this._popupSubtitle=this._popup.querySelector(".popup__subtitle")}open(e,t){super.open(),this._popupSubtitle.textContent=e,this._picturePopupImage.alt=e,this._picturePopupImage.src=t}}(".popup_open-img");p.setEventListeners();const m=new class{constructor(e,t,s){this._profileName=document.querySelector(e),this._profileInfo=document.querySelector(t),this._profileAvatar=document.querySelector(s),this._profileId=""}getUserInfo(){return{name:this._profileName.textContent,about:this._profileInfo.textContent,avatar:this._profileAvatar.src,id:this._profileId}}setUserInfo(e,t,s){this._profileName.textContent=e,this._profileInfo.textContent=t,this._profileId=s}getUserId(){return this._userId}setUserAvatar(e){this._profileAvatar.src=e}}(".profile__title",".profile__subtitle",".profile__avatar"),f=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}_handleResponse(e){return e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._handleResponse)}setUserInfo({name:e,about:t}){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._handleResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleResponse)}setUserAvatar({avatar:e}){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}addCard({name:e,link:t,alt:s}){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t,alt:s})}).then(this._handleResponse)}putLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-47",headers:{authorization:"0162be33-26fc-4582-97e8-0d78f4ad20d1","Content-Type":"application/json"}});f.getUserInfo().then((e=>{m.setUserInfo(e.name,e.about,e._id)}));const v=new n(".popup_type_profile",{formSubmit:({profileName:e,profileInfo:t})=>f.setUserInfo({name:e,about:t}).then((e=>{m.setUserInfo(e.name,e.about)})).catch((e=>console.log(e)))});v.setEventListeners(),l.addEventListener("click",(()=>{const e=m.getUserInfo();a.value=e.name,h.value=e.about,v.open()})),f.getUserInfo().then((e=>{m.setUserAvatar(e.avatar)}));const b=new n(".popup_type_avatar",{formSubmit:({profileAvatar:e})=>f.setUserAvatar({avatar:e}).then((e=>{m.setUserAvatar(c.src=e.avatar)})).catch((e=>console.error(e)))});b.setEventListeners(),f.getInitialCards().then((t=>{const r=new s({items:t,renderer:t=>{const s=new e({data:t,handleCardClick:(e,t)=>{p.open(e,t)}},".elements").generateCard();r.addItemAppend(s)}},"#card");r.renderItems();const i=new n(".popup_add_card",{formSubmit:t=>{f.addCard(t).then((t=>{const s=new e({data:t,handleCardClick:(e,t)=>{p.open(e,t)}}).generateCard();r.addItemPrepend(s)})).catch((e=>console.log(e)))}});i.setEventListeners(),d.addEventListener("click",(()=>{i.open()}))})),new t(u,o).enableValidation(),new t(u,i).enableValidation(),new t(u,_).enableValidation(),c.addEventListener("click",(()=>{b.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,