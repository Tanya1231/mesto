(()=>{"use strict";class e{constructor(e,t){this.config=e,this._form=t,this._sumbitButton=this._form.querySelector(e.sumbitButton),this._inactiveButtonClass=e.inactiveButtonClass}_setCustomError(e){const t=e.validity;if(e.setCustomValidity(""),t.tooShort||t.tooLong){const t=e.value.length,s=e.getAttribute("minlength");e.setCustomValidity(`Минимальное колличество символов ${s}. Длина текста сейчас ${t} символ`)}}_setFieldError(e){document.querySelector(`#${e.id}-error`).textContent=e.validationMessage}_setButtonState(){this._form.checkValidity()?(this._sumbitButton.classList.remove(this._inactiveButtonClass),this._sumbitButton.removeAttribute("disabled")):this._disableButtonState()}_disableButtonState(){this._sumbitButton.classList.add(this._inactiveButtonClass),this._sumbitButton.setAttribute("disabled",!0)}_handleFormSumbit(e){e.preventDefault(),this._disableButtonState()}_handleFormInput(e){const t=e.target;this._setCustomError(t),this._setFieldError(t),this._setButtonState()}enableValidation=()=>{this._form.addEventListener("submit",(e=>this._handleFormSumbit(e))),this._form.addEventListener("input",(e=>this._handleFormInput(e))),this._setButtonState()}}class t{constructor({name:e,link:t,handleCardClick:s},n){this._name=e,this._link=t,this._handleCardClick=s,this._cardSelector=n,this._card=this._getTemplate()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}_removeCard=()=>{this._card.remove(),this._card=null};_likeCard(e){e.target.classList.toggle("element__vector_active")}_setEventListners(){this._card.querySelector(".element__delete").addEventListener("click",this._removeCard),this._card.querySelector(".element__vector").addEventListener("click",this._likeCard),this._card.querySelector(".element__image").addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}generateCard(){return this._image=this._card.querySelector(".element__image"),this._card.querySelector(".element__title").textContent=this._name,this._image.src=this._link,this._image.alt=this._name,this._setEventListners(),this._card}}class s{constructor(e){this._popup=document.querySelector(e),this.close=this.close.bind(this),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popup.querySelector(".popup__button-close").addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class n extends s{constructor(e,{formSubmit:t}){super(e),this._formSubmit=t,this._form=this._popup.querySelector(".form"),this._submitButton=this._popup.querySelector(".form__button"),this._inputList=this._popup.querySelectorAll(".form__container")}_getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}close(){this._form.reset(),super.close()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._formSubmit(this._getInputValues()),this.close()}))}}const r=document.querySelector(".form"),o=document.querySelector(".form_popup_add-card"),i=document.querySelector(".form__container_type_name"),a=document.querySelector(".form__container_type_info"),c=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__addbutton"),d={form:".form",sumbitButton:".form__button",inactiveButtonClass:"form__button_invalid"},u=new class extends s{constructor(e){super(e),this._picturePopupImage=this._popup.querySelector(".popup__image"),this._popupSubtitle=this._popup.querySelector(".popup__subtitle")}open(e,t){super.open(),this._popupSubtitle.textContent=e,this._picturePopupImage.alt=e,this._picturePopupImage.src=t}}(".popup_open-img");u.setEventListeners();const _=(e,s)=>new t({name:e,link:s,handleCardClick:()=>{u.open(e,s)}},"#card").generateCard(),p=new class{constructor(e,t){this._profileName=document.querySelector(e),this._profileInfo=document.querySelector(t)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileInfo.textContent}}setUserInfo(e){this._profileName.textContent=e.name,this._profileInfo.textContent=e.about}}(".profile__title",".profile__subtitle"),m=new n(".popup_type_profile",{formSubmit:e=>{p.setUserInfo(e)}});m.setEventListeners(),c.addEventListener("click",(()=>{const e=p.getUserInfo();i.value=e.name,a.value=e.about,m.open()}));const h=new n(".popup_add_card",{formSubmit:e=>{const t=_(e.name,e.link);f.addItemPrepend(t)}});h.setEventListeners();const f=new class{constructor({items:e,renderer:t},s){this._renderItems=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(){this._renderItems.forEach((e=>{this._renderer(e)}))}addItemAppend(e){this._container.append(e)}addItemPrepend(e){this._container.prepend(e)}}({items:[{name:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{name:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{name:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{name:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{name:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{name:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}],renderer:e=>{const t=_(e.name,e.link);f.addItemAppend(t)}},".elements");f.renderItems(),l.addEventListener("click",(()=>{h.open()})),new e(d,o).enableValidation(),new e(d,r).enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,